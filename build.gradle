plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

springBoot {
    mainClass = 'me.lee_sh1673.book.Application'
}

group 'me.lee_sh1673.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

// 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지를 정한다.
repositories {
    // 	가장 많이 사용되는 저장소, 단 본인이 만든 라이브러리를 업로드하기 위해서는 많은 과정과 설정이 필요하다.
    mavenCentral()
}

// 프로젝트 개발에 필요한 의존성들을 선언하는 부분
/** 참고:
  * https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_dependency_management_overview
  * https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management
 */
/**
 * compileOnly — for dependencies that are necessary to compile your production code but shouldn’t be part of the runtime classpath
 * implementation (supersedes compile) — used for compilation and runtime, Implementation only dependencies.
 * runtimeOnly (supersedes runtime) — only used at runtime, not for compilation
 * compileOnly —  Compile time only dependencies, not used at runtime.
 * testCompileOnly — same as `compileOnly` except it’s for the tests.
 * testImplementation — test equivalent of `implementation`
 * testRuntimeOnly — test equivalent of `runtimeOnly`
 */
dependencies {
    // spring-boot
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    // lombok
    implementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testImplementation('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    // spring data jpa for spring-boot.
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    // h2 database (in-memory relational database)
    implementation('com.h2database:h2')

    // mustache
    implementation('org.springframework.boot:spring-boot-starter-mustache')

    // 소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현시 필요한 의존성
    // `spring-security-oauth2-client` 와 `spring-security-oauth2-jose`를 기본으로 관리해준다.
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')

    // 세션 저장소를 jdbc로 설정
    implementation('org.springframework.session:spring-session-jdbc')

    // 스프링 시큐리티 시큐리티 테스트 라이브러리
    testImplementation("org.springframework.security:spring-security-test")
}

// Runs the unit tests using JUnit or TestNG.
test {
    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform()
}